//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.6

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "store")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub store_id: String,
    pub sales_associate_id: String,
    pub name: String,
    #[sea_orm(column_type = "VarBinary(StringLen::None)")]
    pub image: Vec<u8>,
    pub location: String,
    pub operational_status: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::souvenir::Entity")]
    Souvenir,
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::SalesAssociateId",
        to = "super::user::Column::UserId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    User,
}

impl Related<super::souvenir::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Souvenir.def()
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::User.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
