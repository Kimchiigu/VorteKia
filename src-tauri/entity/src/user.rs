//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.6

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "user")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub user_id: String,
    pub name: String,
    #[sea_orm(unique)]
    pub email: String,
    pub dob: String,
    pub role: String,
    #[sea_orm(column_type = "Double")]
    pub balance: f64,
    pub restaurant_id: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::maintenance::Entity")]
    Maintenance,
    #[sea_orm(has_many = "super::message::Entity")]
    Message,
    #[sea_orm(has_many = "super::notification::Entity")]
    Notification,
    #[sea_orm(has_many = "super::proposal::Entity")]
    Proposal,
    #[sea_orm(has_many = "super::queue::Entity")]
    Queue,
    #[sea_orm(has_many = "super::report::Entity")]
    Report,
    #[sea_orm(
        belongs_to = "super::restaurant::Entity",
        from = "Column::RestaurantId",
        to = "super::restaurant::Column::RestaurantId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Restaurant,
    #[sea_orm(has_many = "super::store::Entity")]
    Store,
    #[sea_orm(has_many = "super::transaction::Entity")]
    Transaction,
}

impl Related<super::maintenance::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Maintenance.def()
    }
}

impl Related<super::message::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Message.def()
    }
}

impl Related<super::notification::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Notification.def()
    }
}

impl Related<super::proposal::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Proposal.def()
    }
}

impl Related<super::queue::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Queue.def()
    }
}

impl Related<super::report::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Report.def()
    }
}

impl Related<super::restaurant::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Restaurant.def()
    }
}

impl Related<super::store::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Store.def()
    }
}

impl Related<super::transaction::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Transaction.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
