//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.6

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "ride")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub ride_id: String,
    pub staff_id: Option<String>,
    pub name: String,
    #[sea_orm(column_type = "Double")]
    pub price: f64,
    #[sea_orm(column_type = "VarBinary(StringLen::None)")]
    pub image: Vec<u8>,
    pub description: String,
    pub location: String,
    pub status: String,
    pub capacity: i32,
    pub maintenance_status: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::maintenance::Entity")]
    Maintenance,
    #[sea_orm(has_many = "super::queue::Entity")]
    Queue,
}

impl Related<super::maintenance::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Maintenance.def()
    }
}

impl Related<super::queue::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Queue.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}